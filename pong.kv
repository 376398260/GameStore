# ****.kv:
#     - the purpose of using this file is to separate the logic of our application
#       and its GUI components, for the sake of clarity and better maintainability.
#     - style your application inside this .kv file (think of it as CSS).
#     - use this file to add widgets, design layout and appearance, register events.
#     - the main contents and logic should be left to the .py file.


# style a whole widget class globally (a class rule)
<Ball>:
    size: 60, 60
    canvas:
        Ellipse:
            # in kivy, pos/origin is at the bottom left, drawing goes towards the top right direction
            pos: self.pos  # to be set in the root widget or updated in .py
            size: self.size
            source: "assets/pong_ball.png"

<Paddle>:
    size: 10, self.length  # dynamically updated in .py
    canvas:
        Color:
            rgba: 0, 0, 0, 0.6  # rgb range (0, 255) is scaled to (0, 1)
        Rectangle:
            pos: self.pos
            size: self.size


# style the root widget
<Root>:
    ball: ball
    player1: player1  # bind class-level property from .py to a corresponding id so as to reference it
    player2: player2  # property: id (property names must match with those in .py, id is user-defined)

    # add graphics instructions in canvas (root)
    canvas.before:
        Rectangle:
            pos: self.pos
            size: self.size
            source: "assets/pong_board.jpg"

    canvas:
        Color:  # ~ from kivy.graphics import Color
            rgba: 1, 0, 0, 0.5
        Rectangle:  # ~ from kivy.graphics import Rectangle
            pos: self.center_x - 1, 0  # x, y
            size: 2, self.height       # width, height

    # add widgets (can group widgets in layout, layouts can be nested, e.g. BoxLayout, FloatLayout, GridLayout)
    Label:
        # we can override the class rule at the instance level
        font_size: 70
        center_x: root.width / 4
        center_y: root.height / 2
        text: str(root.score1)
        color: 0, 0, 0, 1

    Label:
        font_size: 70
        center_x: root.width / 4 * 3
        center_y: root.height / 2
        text: str(root.score2)
        color: 0, 0, 0, 1

    Ball:
        id: ball
        center: root.center

    Paddle:
        id: player1
        x: 0
        center_y: root.center_y

    Paddle:
        id: player2
        x: root.width - self.width
        center_y: root.center_y
